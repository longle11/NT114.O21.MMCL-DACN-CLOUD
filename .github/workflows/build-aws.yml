#checkov:skip=CKV2_GHA_1
name: "Terraform"
on:
  push:
    branches: ["main"]
permissions: read-all
jobs:
  terraform:
    name: "Terraform"
    env:
      # AWS secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.SC_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{secrets.SC_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.SC_AWS_REGION }}
      

    runs-on: ubuntu-latest
    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: "checkout"
        uses: "actions/checkout@v3"
        
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./
          framework: terraform

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Update email authentication before using helm to create alertmanager
        run: sed -i 's/auth_password'":"' tempcode/auth_password'":"' ${{ secrets.EMAIL_AUTH }}/' ./file/valuePrometheus.yaml
      
      - name: Update email authentication before using helm to create alertmanager
        run: cat ./file/valuePrometheus.yaml | grep auth_password

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan

      - name: Terraform apply
        run: terraform apply -auto-approve

      - name: accessing to eks cluster
        run: aws eks --region ${{ secrets.SC_AWS_REGION }} update-kubeconfig --name ${{ secrets.K8S_CLUSTER_NAME }}

      - name: procceeding to create storageclass EBS
        run: kubectl apply -f ./manifests/ebs-storage-class.yaml

      - name: Create secret for jwt token to authenticate
        run: |
          if kubectl get secret -n default | grep "jwt-secret"; then
            echo "This secret is already existed"
          else
            kubectl create secret generic jwt-secret --from-literal=jwt_key=${{secrets.SECRET_JWT_KEY}}
          fi
      
      - name: Create authentication for private docker registry
        run: |
          if kubectl get secret -n default | grep "authenticate-registry"; then
            echo "This secret is already existed"
          else
            kubectl create secret docker-registry authenticate-registry --docker-server=${{ secrets.PRIVATE_DOCKER_URL }} --docker-username=taskscheduler --docker-password=12341234 --docker-email=z45letranphilong@gmail.com -n default --docker-server=portus.nt533uitjiradev.click --docker-username=${{ secrets.PRIVATE_DOCKER_USERNAME }} --docker-password=${{ secrets.PRIVATE_DOCKER_PASS }} --docker-email=${{ secrets.PRIVATE_DOCKER_EMAIL }} -n default || true
          fi

      - name: procceeding to create nats streaming server
        run: kubectl apply -f ./manifests/nats-depl.yaml

      - name: getting alertmanager service file to edit config
        run: kubectl get service/alertmanager-operated -n monitoring -o yaml > alertmanager-operated.yaml
      
      - name: deleting none ip and change ClusterIP to LoadBalancer on alertmanager svc
        run: sed -i -e '/clusterIP'":"' None/d' -e '/clusterIPs'":"'/,+1d' -e '/- name'":"' udp-mesh/,+3d' -e 's/type'":"' ClusterIP/type'":"' LoadBalancer/' alertmanager-operated.yaml 

      - name: deleting available alermanager svc 
        run: kubectl delete service/alertmanager-operated -n monitoring

      - name: applying new alermanager svc
        run: kubectl apply -f alertmanager-operated.yaml

      - name: getting prometheus service file to edit config
        run: kubectl get service/prometheus-operated -n monitoring -o yaml > prometheus-operated.yaml

      - name: getting prometheus service file to edit config
        run: sed -i -e '/clusterIP'":"' None/d' -e '/clusterIPs'":"'/,+1d' -e 's/type'":"' ClusterIP/type'":"' LoadBalancer/' prometheus-operated.yaml
  
      - name: deleting available prometheus svc
        run: kubectl delete service/prometheus-operated -n monitoring

      - name: applying new prometheus svc
        run: kubectl apply -f prometheus-operated.yaml

      - name: converting grafana from ClusterIP to LoadBalancer
        run: kubectl patch svc monitoring-grafana -n monitoring -p '{"spec"'":"' {"type"'":"' "LoadBalancer"}}'
      
      - name: Creating Certificate for domain name
        run: |
          if kubectl get pods -n cert-manager | grep "cert-manager"; then
            echo "This cert-manager is already existed"
          else 
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.yaml
          fi
      
      - name: creating new certmanager
        run: kubectl apply -f ./manifests/cert-manager.yaml

      - name: getting cert ssl
        run: kubectl apply -f ./manifests/certificate-ssl.yaml


      - name: adding argocd config for monitoring repo
        run: kubectl apply -f ./manifests/argocd-config.yaml

      - name: creating ingress controller
        run: kubectl apply -f ./manifests/application-ingress-kong.yaml